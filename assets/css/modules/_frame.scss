//
// Variables
// --------------------------------------------------
$frame-inner-spacing:         1.75rem !default;
$frame-inner-spacing-scaling: () !default;
$frame-inner-spacing-scaling: map-merge(
    (
        xs: 1,
        sm: 1.2,
        md: 1.3,
        lg: 1.4,
        xl: 1.5
    ),
    $frame-inner-spacing-scaling
);
$frame-backgrounds: () !default;
$frame-backgrounds: map-merge(
    (
        primary: (
            background:                $primary,
            link-color:                $link-alternate-color,
            link-hover-color:          $link-alternate-hover-color
        ),
        secondary: (
            background:                $secondary,
            link-color:                $link-alternate-color,
            link-hover-color:          $link-alternate-hover-color
        ),
        tertiary: (
            background:                $tertiary,
            link-color:                $link-alternate-color,
            link-hover-color:          $link-alternate-hover-color
        ),
        quaternary: (
            background:                $quaternary,
            link-color:                $link-alternate-color,
            link-hover-color:          $link-alternate-hover-color
        ),
        white: (
            background:                #ffffff,
            link-color:                $link-color,
            link-hover-color:          $link-hover-color
        ),
        light: (
            background:                $light,
            link-color:                $link-color,
            link-hover-color:          $link-hover-color
        ),
        dark: (
            background:                $dark,
            link-color:                $link-alternate-color,
            link-hover-color:          $link-alternate-hover-color
        )
    ),
    $frame-backgrounds
);

//
// Container
// --------------------------------------------------
.frame-container {
    position: relative;
    @include make-container();
    .page-main-container & {
        padding-left: 0;
        padding-right: 0;
    }
}
.frame-container-default {
    @include make-container-max-widths();
}
.frame-container-large {
    max-width: 1600px;
}
.frame-container-medium {
    max-width: 870px;
}
.frame-container-small {
    max-width: 600px;
}
.frame-container-full {
    max-width: none;
}

//
// Frame
// --------------------------------------------------
.frame {
    position: relative;
    @each $breakpoint in map-keys($frame-inner-spacing-scaling) {
        @include media-breakpoint-up($breakpoint) {
            $scaling: map-get($frame-inner-spacing-scaling, $breakpoint);
            padding-top: ($frame-inner-spacing * $scaling);
            padding-bottom: ($frame-inner-spacing * $scaling);
        }
    }
    > *:last-child {
        margin-bottom: 0;
    }
}
.frame-inner {
    > *:last-child {
        margin-bottom: 0;
    }
}

//
// Frame Styles
// --------------------------------------------------
.frame-ruler-before {
    border-top: 1px solid rgba(0, 0, 0, .125);
    margin-top: 0;
}
.frame-ruler-after {
    border-bottom: 1px solid rgba(0, 0, 0, .125);
    @each $breakpoint in map-keys($frame-inner-spacing-scaling) {
        @include media-breakpoint-up($breakpoint) {
            $scaling: map-get($frame-inner-spacing-scaling, $breakpoint);
            margin-bottom: ($frame-inner-spacing * $scaling);
        }
    }
}
.frame-indent {
    .frame-inner {
        @each $breakpoint in map-keys($grid-breakpoints) {
            $i: index(map-keys($grid-breakpoints), $breakpoint);
            $i: $i - 1;
            @include media-breakpoint-up($breakpoint) {
                margin-left: $i * 5%;
                margin-right: $i * 5%;
            }
        }
    }
}
.frame-indent-left {
    .frame-inner {
        @each $breakpoint in map-keys($grid-breakpoints) {
            $i: index(map-keys($grid-breakpoints), $breakpoint);
            $i: $i - 1;
            @include media-breakpoint-up($breakpoint) {
                margin-left: $i * 10%;
            }
        }
    }
}
.frame-indent-right {
    .frame-inner {
        @each $breakpoint in map-keys($grid-breakpoints) {
            $i: index(map-keys($grid-breakpoints), $breakpoint);
            $i: $i - 1;
            @include media-breakpoint-up($breakpoint) {
                margin-right: $i * 10%;
            }
        }
    }
}

//
// Size
// --------------------------------------------------
.frame-size-small {
    padding-top: .5rem;
    padding-bottom: .5rem;
    @include media-breakpoint-up('sm') {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
}

//
// Height
// --------------------------------------------------
.frame-height-small,
.frame-height-medium {
    display: flex;
    .frame-container {
        display: flex;
        align-items: center;
    }
    .frame-inner {
        flex-grow: 1;
    }
}
.frame-height-small {
    min-height: 300px;
    @include media-breakpoint-up(md) {
        min-height: 400px;
    }
}
.frame-height-medium {
    min-height: 400px;
    @include media-breakpoint-up(md) {
        min-height: 500px;
    }
}
.frame-height-max {
    flex-grow: 1;
    display: flex;
    align-items: center;
}

//
// Background
// --------------------------------------------------
.container {
    .frame-has-backgroundimage,
    %frame-has-backgroundimage {
        @each $breakpoint in map-keys($frame-inner-spacing-scaling) {
            @include media-breakpoint-up($breakpoint) {
                $scaling: map-get($frame-inner-spacing-scaling, $breakpoint);
                padding-left: ($frame-inner-spacing * $scaling);
                padding-right: ($frame-inner-spacing * $scaling);
            }
        }
    }
}
.frame-collapsible {
    @each $breakpoint in map-keys($frame-inner-spacing-scaling) {
        @include media-breakpoint-up($breakpoint) {
            $scaling: map-get($frame-inner-spacing-scaling, $breakpoint);
            margin-top: -($frame-inner-spacing * $scaling);
        }
    }
}
@mixin make-frame-spacing($name) {
    .frame-size-default.frame-background-#{$name}:not(.frame-ruler-after):not(.frame-has-backgroundimage) + .frame-size-default.frame-background-#{$name}:not(.frame-ruler-before):not(.frame-has-backgroundimage) {
        @extend .frame-collapsible;
    }
}
@include make-frame-spacing('default');
@mixin make-frame-background($name, $settings) {
    $background: map-get($settings, 'background');
    $color: color-contrast($background);
    $link-color: map-get($settings, 'link-color');
    $link-hover-color: map-get($settings, 'link-hover-color');
    .frame-background-#{$name} {
        @extend %frame-has-backgroundimage;
        color: $color;
        background-color: $background;
        a[class=""] {
            color: $link-color;
            &:hover {
                color: $link-hover-color;
            }
        }
    }
    @include make-frame-spacing($name);
}
@each $name, $settings in $frame-backgrounds {
    @include make-frame-background($name, $settings);
}

//
// Background Image
// --------------------------------------------------
.frame-backgroundimage-container {
    overflow: hidden;
}
.frame-backgroundimage-container,
.frame-backgroundimage {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background-position: center;
    background-size: cover;
}
.frame-backgroundimage-fade {
    opacity: .125;
}
.frame-backgroundimage-parallax {
    background-attachment: fixed;
    @media (hover: none) {
        background-attachment: initial;
    }
    background-repeat: no-repeat;
}
.frame-backgroundimage-blur {
    filter: blur(10px);
    width: calc(100% + 40px);
    height: calc(100% + 40px);
    top: -20px;
    left: -20px;
}
.frame-backgroundimage-grayscale {
    filter: grayscale(1);
}
.frame-backgroundimage-sepia {
    filter: sepia(1);
}

//
// Frame Header
// --------------------------------------------------
.frame-header {
    *:last-child {
        margin-bottom: $spacer;
    }
}
.frame-type-header {
    .frame-header {
        *:last-child {
            margin-bottom: 0;
        }
    }
}
